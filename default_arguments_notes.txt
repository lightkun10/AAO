Default Arugments

As you are writing methods there are times where you may want to make an argument optional. In this scenario, we can assign a default value in the parameter list:

# Let's make num an optional parameter.
# By default, num will have the value of 1
def repeat(message, num=1)
    message * num
end

p repeat("hi") # => "hi"
p repeat("hi", 3) # => "hihihi"

The repeat method above has an optional num argument. If we call repeat without explicitly passing in a value for num, num will be implicitly passed in with the value 1. This is useful for implementing methods with a default behavior.

We are free to use any default value for an optional argument, so the possibilities are endless. A fairly common design pattern is to set an arg to nil by default and have logic based on that scenario:

def greet(person_1, person_2=nil)
    if person_2.nil?
        p "Hey " + person_1
    else
        p "Hey " + person_1 + " and " + person_2 
    end
end

greet("Chao") # => "Hey Chao"
greet("Chao", "Arittro") # => "Hey Chao and Arittro"

To avoid confusion, it's best practice to have optional parameters listed after the required ones. If we stick to this convention, we can always expect arguments to be taken in the same order we pass them in. So avoid writing code like this:

def greet(person_1="default", person_2)
    p person_1 + " and " + person_2
end

greet("Chao") # => "default and Chao"

The method above is not intuitive because although "Chao" is first argument passed in, person_2 will be assigned "Chao". Avoid this by only assigning default values at the end of the parameter list.